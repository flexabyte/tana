use clap::{Arg, App, ArgMatches};

pub fn parse_args() -> ArgMatches<'static> {
    App::new("TANA - the Elasticsearch Data Cruncher")
        .version("0.1.0")
        .author("Flexabyte<flexabyte@protonmail.com>")
        .about("Scalable Elasticsearch Dumping Tool for Compressing TBs to S3 or disk.")
        .arg(Arg::with_name("index")
                 .short("i")
                 .long("index")
                 .takes_value(true)
                 .help("The name of the index you wish to dump"))
        .arg(Arg::with_name("destination")
                 .short("d")
                 .long("dest")
                 .takes_value(true)
                 .help("The destination type: [disk|s3]"))
        .arg(Arg::with_name("bucket")
                 .short("b")
                 .long("bucket")
                 .takes_value(true)
                 .help("The destination S3 bucket name."))
        .arg(Arg::with_name("region")
                 .short("r")
                 .long("region")
                 .takes_value(true)
                 .help("The AWS region where the S3 bucket resides. E.g. [eu-west-2]."))
        .arg(Arg::with_name("gzip")
                 .short("gz")
                 .long("gzip")
                 .takes_value(false)
                 .help("If supplied, compress output using gzip"))
        .arg(Arg::with_name("concurrency")
                .short("con")
                .long("concurrency")
                .takes_value(true)
                .help("The number of scrollers to create. Each scroller can make its own concurrent requests."))
	.get_matches()
}
